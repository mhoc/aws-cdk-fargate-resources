"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FargateResourcePie = exports.FargateResources = void 0;
class FargateResources {
    constructor(cpuRaw, memoryRaw) {
        this.cpu = {
            all: -1,
            take: (n) => {
                if (n < 1) {
                    return Math.floor(this.cpu.all * n);
                }
                n = Math.floor(n);
                if (n > this.cpu.all) {
                    throw new Error(`Requested cpu value ${n} exceeds total cpu available (${this.cpu.all}).`);
                }
                return n;
            },
            pie: () => new FargateResourcePie("cpu", this.cpu.all),
        };
        this.memory = {
            all: -1,
            take: (n) => {
                if (n < 1) {
                    return Math.floor(this.memory.all * n);
                }
                n = Math.floor(n);
                if (n > this.memory.all) {
                    throw new Error(`Requested memory value ${n} exceeds total memory available (${this.cpu.all}).`);
                }
                return n;
            },
            pie: () => new FargateResourcePie("memory", this.memory.all),
        };
        this.cpu.all = cpuRaw;
        this.memory.all = memoryRaw;
    }
}
exports.FargateResources = FargateResources;
FargateResources.cpu250m = {
    mem512m: new FargateResources(250, 512),
    mem1g: new FargateResources(250, 1024),
    mem2g: new FargateResources(250, 2048),
};
FargateResources.cpu500m = {
    mem1g: new FargateResources(500, 1024),
    mem2g: new FargateResources(500, 2048),
    mem3g: new FargateResources(500, 3072),
    mem4g: new FargateResources(500, 4096),
};
FargateResources.cpu1 = {
    mem2g: new FargateResources(1000, 2048),
    mem3g: new FargateResources(1000, 3072),
    mem4g: new FargateResources(1000, 4096),
    mem5g: new FargateResources(1000, 5120),
    mem6g: new FargateResources(1000, 6144),
    mem7g: new FargateResources(1000, 7168),
    mem8g: new FargateResources(1000, 8192),
};
FargateResources.cpu2 = {
    mem4g: new FargateResources(2000, 4096),
    mem5g: new FargateResources(2000, 5120),
    mem6g: new FargateResources(2000, 6144),
    mem7g: new FargateResources(2000, 7168),
    mem8g: new FargateResources(2000, 8192),
    mem9g: new FargateResources(2000, 9216),
    mem10g: new FargateResources(2000, 10240),
    mem11g: new FargateResources(2000, 11264),
    mem12g: new FargateResources(2000, 12288),
    mem13g: new FargateResources(2000, 13312),
    mem14g: new FargateResources(2000, 14336),
    mem15g: new FargateResources(2000, 15360),
    mem16g: new FargateResources(2000, 16384),
};
FargateResources.cpu4 = {
    mem8g: new FargateResources(4000, 8192),
    mem9g: new FargateResources(4000, 9216),
    mem10g: new FargateResources(4000, 10240),
    mem11g: new FargateResources(4000, 11264),
    mem12g: new FargateResources(4000, 12288),
    mem13g: new FargateResources(4000, 13312),
    mem14g: new FargateResources(4000, 14336),
    mem15g: new FargateResources(4000, 15360),
    mem16g: new FargateResources(4000, 16384),
    mem17g: new FargateResources(4000, 17408),
    mem18g: new FargateResources(4000, 18432),
    mem19g: new FargateResources(4000, 19456),
    mem20g: new FargateResources(4000, 20480),
    mem21g: new FargateResources(4000, 21504),
    mem22g: new FargateResources(4000, 22528),
    mem23g: new FargateResources(4000, 23552),
    mem24g: new FargateResources(4000, 24576),
    mem25g: new FargateResources(4000, 25600),
    mem26g: new FargateResources(4000, 26624),
    mem27g: new FargateResources(4000, 27648),
    mem28g: new FargateResources(4000, 28672),
    mem29g: new FargateResources(4000, 29696),
    mem30g: new FargateResources(4000, 30720),
};
class FargateResourcePie {
    constructor(label, value) {
        this.label = label;
        this.value = value;
    }
    rest() {
        this.value = 0;
        return this.value;
    }
    take(n) {
        if (n < 1) {
            const desired = Math.floor(this.value * n);
            if (desired > this.value) {
                throw new Error(`Requested ${this.label} proportion ${n} exceeds remaining ${this.label} available (${desired} > ${this.value}).`);
            }
            this.value -= desired;
            return desired;
        }
        n = Math.floor(n);
        if (n > this.value) {
            throw new Error(`Requested ${this.label} value ${n} exceeds remaining ${this.label} available (${this.value}).`);
        }
        this.value -= n;
        return n;
    }
}
exports.FargateResourcePie = FargateResourcePie;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxNQUFhLGdCQUFnQjtJQTRGM0IsWUFBWSxNQUFjLEVBQUUsU0FBaUI7UUE5QjdCLFFBQUcsR0FBRztZQUNwQixHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQ1AsSUFBSSxFQUFFLENBQUMsQ0FBUyxFQUFVLEVBQUU7Z0JBQzFCLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRTtvQkFDVCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7aUJBQ3JDO2dCQUNELENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNsQixJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRTtvQkFDcEIsTUFBTSxJQUFJLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxpQ0FBaUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO2lCQUM1RjtnQkFDRCxPQUFPLENBQUMsQ0FBQztZQUNYLENBQUM7WUFDRCxHQUFHLEVBQUUsR0FBdUIsRUFBRSxDQUFDLElBQUksa0JBQWtCLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO1NBQzNFLENBQUM7UUFFYyxXQUFNLEdBQUc7WUFDdkIsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUNQLElBQUksRUFBRSxDQUFDLENBQVMsRUFBVSxFQUFFO2dCQUMxQixJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7b0JBQ1QsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO2lCQUN4QztnQkFDRCxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDbEIsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUU7b0JBQ3ZCLE1BQU0sSUFBSSxLQUFLLENBQUMsMEJBQTBCLENBQUMsb0NBQW9DLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztpQkFDbEc7Z0JBQ0QsT0FBTyxDQUFDLENBQUM7WUFDWCxDQUFDO1lBQ0QsR0FBRyxFQUFFLEdBQXVCLEVBQUUsQ0FBQyxJQUFJLGtCQUFrQixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztTQUNqRixDQUFDO1FBR0EsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHLFNBQVMsQ0FBQztJQUM5QixDQUFDOztBQS9GSCw0Q0FpR0M7QUFoR3dCLHdCQUFPLEdBQUc7SUFDL0IsT0FBTyxFQUFFLElBQUksZ0JBQWdCLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQztJQUN2QyxLQUFLLEVBQUUsSUFBSSxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDO0lBQ3RDLEtBQUssRUFBRSxJQUFJLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUM7Q0FDdkMsQ0FBQztBQUNxQix3QkFBTyxHQUFHO0lBQy9CLEtBQUssRUFBRSxJQUFJLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUM7SUFDdEMsS0FBSyxFQUFFLElBQUksZ0JBQWdCLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQztJQUN0QyxLQUFLLEVBQUUsSUFBSSxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDO0lBQ3RDLEtBQUssRUFBRSxJQUFJLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUM7Q0FDdkMsQ0FBQztBQUNxQixxQkFBSSxHQUFHO0lBQzVCLEtBQUssRUFBRSxJQUFJLGdCQUFnQixDQUFDLElBQUksRUFBRSxJQUFJLENBQUM7SUFDdkMsS0FBSyxFQUFFLElBQUksZ0JBQWdCLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQztJQUN2QyxLQUFLLEVBQUUsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO0lBQ3ZDLEtBQUssRUFBRSxJQUFJLGdCQUFnQixDQUFDLElBQUksRUFBRSxJQUFJLENBQUM7SUFDdkMsS0FBSyxFQUFFLElBQUksZ0JBQWdCLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQztJQUN2QyxLQUFLLEVBQUUsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO0lBQ3ZDLEtBQUssRUFBRSxJQUFJLGdCQUFnQixDQUFDLElBQUksRUFBRSxJQUFJLENBQUM7Q0FDeEMsQ0FBQztBQUNxQixxQkFBSSxHQUFHO0lBQzVCLEtBQUssRUFBRSxJQUFJLGdCQUFnQixDQUFDLElBQUksRUFBRSxJQUFJLENBQUM7SUFDdkMsS0FBSyxFQUFFLElBQUksZ0JBQWdCLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQztJQUN2QyxLQUFLLEVBQUUsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO0lBQ3ZDLEtBQUssRUFBRSxJQUFJLGdCQUFnQixDQUFDLElBQUksRUFBRSxJQUFJLENBQUM7SUFDdkMsS0FBSyxFQUFFLElBQUksZ0JBQWdCLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQztJQUN2QyxLQUFLLEVBQUUsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxJQUFJLGdCQUFnQixDQUFDLElBQUksRUFBRSxLQUFLLENBQUM7SUFDekMsTUFBTSxFQUFFLElBQUksZ0JBQWdCLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQztJQUN6QyxNQUFNLEVBQUUsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDO0lBQ3pDLE1BQU0sRUFBRSxJQUFJLGdCQUFnQixDQUFDLElBQUksRUFBRSxLQUFLLENBQUM7SUFDekMsTUFBTSxFQUFFLElBQUksZ0JBQWdCLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQztJQUN6QyxNQUFNLEVBQUUsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDO0lBQ3pDLE1BQU0sRUFBRSxJQUFJLGdCQUFnQixDQUFDLElBQUksRUFBRSxLQUFLLENBQUM7Q0FDMUMsQ0FBQztBQUNxQixxQkFBSSxHQUFHO0lBQzVCLEtBQUssRUFBRSxJQUFJLGdCQUFnQixDQUFDLElBQUksRUFBRSxJQUFJLENBQUM7SUFDdkMsS0FBSyxFQUFFLElBQUksZ0JBQWdCLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQztJQUN2QyxNQUFNLEVBQUUsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDO0lBQ3pDLE1BQU0sRUFBRSxJQUFJLGdCQUFnQixDQUFDLElBQUksRUFBRSxLQUFLLENBQUM7SUFDekMsTUFBTSxFQUFFLElBQUksZ0JBQWdCLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQztJQUN6QyxNQUFNLEVBQUUsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDO0lBQ3pDLE1BQU0sRUFBRSxJQUFJLGdCQUFnQixDQUFDLElBQUksRUFBRSxLQUFLLENBQUM7SUFDekMsTUFBTSxFQUFFLElBQUksZ0JBQWdCLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQztJQUN6QyxNQUFNLEVBQUUsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDO0lBQ3pDLE1BQU0sRUFBRSxJQUFJLGdCQUFnQixDQUFDLElBQUksRUFBRSxLQUFLLENBQUM7SUFDekMsTUFBTSxFQUFFLElBQUksZ0JBQWdCLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQztJQUN6QyxNQUFNLEVBQUUsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDO0lBQ3pDLE1BQU0sRUFBRSxJQUFJLGdCQUFnQixDQUFDLElBQUksRUFBRSxLQUFLLENBQUM7SUFDekMsTUFBTSxFQUFFLElBQUksZ0JBQWdCLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQztJQUN6QyxNQUFNLEVBQUUsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDO0lBQ3pDLE1BQU0sRUFBRSxJQUFJLGdCQUFnQixDQUFDLElBQUksRUFBRSxLQUFLLENBQUM7SUFDekMsTUFBTSxFQUFFLElBQUksZ0JBQWdCLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQztJQUN6QyxNQUFNLEVBQUUsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDO0lBQ3pDLE1BQU0sRUFBRSxJQUFJLGdCQUFnQixDQUFDLElBQUksRUFBRSxLQUFLLENBQUM7SUFDekMsTUFBTSxFQUFFLElBQUksZ0JBQWdCLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQztJQUN6QyxNQUFNLEVBQUUsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDO0lBQ3pDLE1BQU0sRUFBRSxJQUFJLGdCQUFnQixDQUFDLElBQUksRUFBRSxLQUFLLENBQUM7SUFDekMsTUFBTSxFQUFFLElBQUksZ0JBQWdCLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQztDQUMxQyxDQUFDO0FBdUNKLE1BQWEsa0JBQWtCO0lBRTdCLFlBQ21CLEtBQWEsRUFDdEIsS0FBYTtRQURKLFVBQUssR0FBTCxLQUFLLENBQVE7UUFDdEIsVUFBSyxHQUFMLEtBQUssQ0FBUTtJQUNwQixDQUFDO0lBRUcsSUFBSTtRQUNULElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ2YsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7SUFFTSxJQUFJLENBQUMsQ0FBUztRQUNuQixJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDVCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDM0MsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRTtnQkFDeEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxhQUFhLElBQUksQ0FBQyxLQUFLLGVBQWUsQ0FBQyxzQkFBc0IsSUFBSSxDQUFDLEtBQUssZUFBZSxPQUFPLE1BQU0sSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUM7YUFDcEk7WUFDRCxJQUFJLENBQUMsS0FBSyxJQUFJLE9BQU8sQ0FBQztZQUN0QixPQUFPLE9BQU8sQ0FBQztTQUNoQjtRQUNELENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xCLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDbEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxhQUFhLElBQUksQ0FBQyxLQUFLLFVBQVUsQ0FBQyxzQkFBc0IsSUFBSSxDQUFDLEtBQUssZUFBZSxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQztTQUNsSDtRQUNELElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDO1FBQ2hCLE9BQU8sQ0FBQyxDQUFDO0lBQ1gsQ0FBQztDQUVGO0FBN0JELGdEQTZCQyJ9